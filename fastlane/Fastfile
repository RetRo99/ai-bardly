# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do

    # Build the release bundle
    gradle(task: "clean bundleRelease")

    # Upload to Google Play Store
    upload_to_play_store(
      json_key: 'fastlane/google-play-service-account.json',
      track: 'internal', # Deploy to internal track
    )

  end

  desc "Deploy a new app version to Google Play Store and automatically update version information across branches"
  lane :deploy_and_bump do
    # Call the deploy lane to handle the actual deployment
    deploy

    # Get current version info before bumping
    old_version = get_version_name(app_project_dir: '**/composeApp')
    old_code = get_version_code(app_project_dir: '**/composeApp')

    # After successful deployment, bump the version
    increment_version_name(
      app_project_dir: '**/composeApp',
      bump_type: 'patch'
    )

    # Increment version code
    increment_version_code(app_project_dir: '**/composeApp')

    # Get new version for commit message
    new_version = get_version_name(app_project_dir: '**/composeApp')
    new_code = get_version_code(app_project_dir: '**/composeApp')

    # Create changelog for commit
    changelog = "Version bump from #{old_version} (#{old_code}) to #{new_version} (#{new_code})"

    # Commit the version changes
    git_commit(
      path: ["composeApp/build.gradle.kts"],
      message: "[skip ci] chore: #{changelog}",
      allow_nothing_to_commit: true,
    )

    # Get current branch
    current_branch = git_branch

    # Push changes to current branch
    push_to_git_remote(
      remote: "origin",
      local_branch: current_branch,
      remote_branch: current_branch
    )

    # Now apply the same changes to develop branch if it exists
    begin
      # Check if develop branch exists using the git_branch_exists? method
      if git_branch_exists?(branch: "develop")
        # Get the SHA of the commit we just made
        last_commit_sha = last_git_commit[:commit_hash]

        # Checkout develop branch
        sh("git fetch origin develop")
        sh("git checkout develop")

        # Cherry-pick the commit from main
        sh("git cherry-pick #{last_commit_sha}")

        # Push to develop
        push_to_git_remote(
          remote: "origin",
          local_branch: "develop",
          remote_branch: "develop",
          force: false
        )

        # Switch back to the original branch
        sh("git checkout #{current_branch}")
        UI.success("Version bump successfully applied to both #{current_branch} and develop branches")
      else
        UI.important("develop branch doesn't exist - only updated #{current_branch}")
      end
    rescue => ex
      UI.error("Failed to apply version bump to develop branch: #{ex}")
      UI.important("Version bump was only applied to #{current_branch}")
      sh("git checkout #{current_branch}") rescue nil
    end
  end

  # Helper method to check if a branch exists
  def git_branch_exists?(branch:)
    `git ls-remote --heads origin #{branch}`.strip.length > 0
  end

    lane :release do
      # Plugin: ensure_git_status_clean - Check for uncommitted changes before starting
      ensure_git_status_clean

      # Use git_pull with rebase option for cleaner commit history
      sh("git checkout main")
      git_pull(rebase: true)  # Pulling with rebase to avoid merge commits

      sh("git checkout develop")
      git_pull(rebase: true)  # Pulling with rebase to avoid merge commits

      # Plugin: get_version_name and get_version_code - Read the app version info
      # These are from the plugins "get_version_name" and "get_version_code"
      versionName = get_version_name(app_project_dir: '**/composeApp')
      versionCode = get_version_code(app_project_dir: '**/composeApp')
      version = "#{versionName}-#{versionCode}"

      # Log the version being released using UI instead of puts
      UI.header("Creating Release #{version}")

      # Plugin: changelog_from_git_commits - Generate changelog from commits
      changelog = changelog_from_git_commits(
        between: ["develop", "HEAD"],     # Get all commits between develop and HEAD
        pretty: "- %s",                   # Format for each commit
        date_format: "short",             # "2023-01-30" format
        match_lightweight_tag: false,     # Use annotated tags only
        merge_commit_filtering: "exclude_merges" # Exclude merge commits
      )

      # Execute git-flow commands with better error handling
      begin
        sh("git flow release start #{version}")

        # Optional: Write generated changelog to CHANGELOG.md
        if !changelog.nil? && !changelog.empty?
          UI.message("Updating CHANGELOG.md with release notes")

          update_changelog(
            version: version,
            changelog_path: "./CHANGELOG.md",
            append_date: true,
            section_identifier: version,
            content: changelog
          )
          Commit changelog if updated
          git_commit(path: "./CHANGELOG.md", message: "Update CHANGELOG for version #{version}")
        end

sh("git flow release finish -m \"Release #{version}\" #{version}")      rescue => ex
        UI.error("Git flow commands failed: #{ex}")
        # You could add error handling or cleanup here
        raise
      end

      # Use fastlane's git actions instead of shell commands
      sh("git checkout main")
      push_to_git_remote(remote: "origin", local_branch: "main", remote_branch: "main")

      sh("git checkout develop")
      push_to_git_remote(remote: "origin", local_branch: "develop", remote_branch: "develop")

      # Plugin: push_git_tags - Push tags with clearer logging
      UI.message("Pushing tags to remote")
      push_git_tags(remote: "origin")

      notification(
        title: "Fastlane Release Complete",
        message: "Successfully released version #{version}",
        sound: "default"
      )

      UI.success("Successfully released version #{version}")
    end

end
